package com.nercel.enroll.controller.api;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.nercel.enroll.domain.common.Response;
import com.nercel.enroll.domain.dto.PlanTimeDto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 处理基础数据相关的流程
 * 
 * @author yishui
 * @date 2018年6月13日
 * @version 0.0.1
 */
@RestController
@RequestMapping("/basic")
@Api(value = "基础数据", tags = { "基础数据接口" })
public interface BasicDataController {
	/**
	 * 查询出所有的民族
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的民族", notes = "查询出所有的民族的接口")
	@GetMapping(value = "/nation")
	@ResponseBody
	Response queryAllNation();

	/**
	 * 发送验证码
	 * 
	 * @param request
	 * @param phone
	 * @return
	 */
	@ApiOperation(value = "发送验证码", notes = "发送验证码")
	@PostMapping(value = "/sendSmsCode")
	@ResponseBody
	Response sendSmsCode(HttpServletRequest request,
			@ApiParam(required = true, name = "phone", value = "手机号") @RequestParam(value = "phone", required = true) String phone);

	/**
	 * 验证码校验
	 * 
	 * @param request
	 * @param phone
	 * @param smsCode
	 * @return
	 */
	@ApiOperation(value = "检验验证码是否正确", notes = "判断验证码是否正确")
	@GetMapping(value = "/querySmsCode")
	@ResponseBody
	Response querySmsCode(HttpServletRequest request,
			@ApiParam(required = true, name = "phone", value = "手机号") @RequestParam(value = "phone", required = true) String phone,
			@ApiParam(required = true, name = "smsCode", value = "验证码") @RequestParam(value = "smsCode", required = true) String smsCode);

	/**
	 * 查询出所有的国家
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的国家", notes = "查询出所有的国家的接口")
	@GetMapping(value = "/country")
	@ResponseBody
	Response queryALLCountry();

	/**
	 * 查询出所有的证件类型
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的证件类型", notes = "查询出所有的证件类型的接口")
	@GetMapping(value = "/certifatesType")
	@ResponseBody
	Response queryAllCertificatesType();

	/**
	 * 查询出所有的与学生的关系
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的与学生的关系", notes = "查询出所有的与学生的关系的接口")
	@GetMapping(value = "/relational")
	@ResponseBody
	Response queryAllRelational();

	/**
	 * 查询出所有的学校
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的学校", notes = "查询出所有的学校的接口")
	@GetMapping(value = "/school")
	@ResponseBody
	Response queryAllSchool();

	/**
	 * 查询出学校招收的街道
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出所有的学校招收的街道", notes = "查询出所有的学校招收的街道的接口")
	@GetMapping(value = "/streetSchool")
	@ResponseBody
	Response queryAllStreetSchool();

	/**
	 * 查询出2018年小学毕业生学籍信息
	 * 
	 * @return
	 */
	@ApiOperation(value = "查询出2018年小学毕业生学籍信息", notes = "查询出2018年小学毕业生学籍信息的接口")
	@GetMapping(value = "/studentInfo")
	@ResponseBody
	Response queryAllStudentInfo();

	/**
	 * 根据学籍号查询小学毕业生信息
	 * 
	 * @return
	 */
	@ApiOperation(value = "根据学籍号查询小学毕业生信息", notes = "根据学籍号查询小学毕业生信息的接口")
	@GetMapping(value = "/studentNumber")
	@ResponseBody
	Response queryStudentInfo(@RequestParam(name = "studentNumber") String studentNumber);

	/**
	 * 根据学校类型查询学校
	 * 
	 * @return
	 */
	@ApiOperation(value = "根据学校类型查询学校", notes = "根据学校类型查询学校的接口")
	@GetMapping(value = "/schoolType")
	@ResponseBody
	Response querySchoolByType(@RequestParam(name = "schoolType") Integer schoolType);

	/**
	 * 保存计划时间
	 * 
	 * @param token
	 * @param planTimeDto
	 * @return
	 */
	@ApiOperation(value = "保存计划时间", notes = "管理员角色保存计划时间")
	@PostMapping(value = "/savePlanTime")
	@ResponseBody
	Response savePlanTime(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token,

			@ApiParam(required = true, name = "planTimeDto", value = "时间参数") @RequestBody(required = true) PlanTimeDto planTimeDto);

	/**
	 * 系统管理员开启或关闭审核权限
	 * 
	 * @param token
	 * @param statu
	 * @return
	 */
	@ApiOperation(value = "开启/关闭审核和学校分配权限", notes = "系统开启/关闭审核和学校分配权限")
	@PutMapping(value = "/updateAuditStatu")
	@ResponseBody
	Response updateAuditStatu(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token,
			@ApiParam(required = true, name = "status", value = "true表开启审核权限，false表示关闭") @RequestParam(name = "status", required = true) Boolean status);

	/**
	 * 查询开关的开启状态
	 * 
	 * @param token
	 *            用户token
	 * @return
	 */
	@ApiOperation(value = "系统管理员查询审核开光的状态", notes = "系统管理员查询审核开光的状态，true表示其他管理员角色可以审核")
	@GetMapping(value = "/queryAuditStatu")
	@ResponseBody
	Response queryAuditStatu(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token);

}
