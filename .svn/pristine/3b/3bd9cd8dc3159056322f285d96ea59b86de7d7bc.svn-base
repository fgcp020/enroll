package com.nercel.enroll.controller.api.impl;

import java.io.IOException;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nercel.enroll.controller.api.BasicOperateController;
import com.nercel.enroll.core.service.BasicOperateService;
import com.nercel.enroll.domain.common.CustomeException;
import com.nercel.enroll.domain.common.Response;
import com.nercel.enroll.domain.common.Response.Statu;
import com.nercel.enroll.domain.dto.PlanTimeDto;
import com.nercel.enroll.domain.model.beans.PlanTime;

import io.swagger.annotations.ApiParam;

/**
 * 基础操作相关的接口类
 * 
 * @author yishui
 * @date 2018年6月29日
 * @version 0.0.1
 */
@RestController
public class BasicOperateImplController implements BasicOperateController {
	private final static Logger LOG = LoggerFactory.getLogger(BasicOperateImplController.class);
	@Autowired
	private BasicOperateService basicDataService;

	@Override
	public Response sendSmsCode(HttpServletRequest request,
			@ApiParam(required = true, name = "phone", value = "手机号") @RequestParam(value = "phone", required = true) String phone) {
		Boolean result = false;
		try {
			result = basicDataService.sendSmsCode(phone);
		} catch (IOException e) {
			LOG.error(e.getMessage());
		} catch (CustomeException e) {
			return new Response(Statu.FAIL, e.getMessage(), UUID.randomUUID().toString());
		} catch (Exception e) {
			return new Response(Statu.FAIL, e.getMessage(), UUID.randomUUID().toString());
		}
		return new Response(result ? Statu.OK : Statu.FAIL, result ? "验证码发送成功" : "验证码发送失败",
				UUID.randomUUID().toString());
	}

	@Override
	public Response querySmsCode(HttpServletRequest request,
			@ApiParam(required = true, name = "phone", value = "手机号") @RequestParam(value = "phone", required = true) String phone,
			@ApiParam(required = true, name = "smsCode", value = "验证码") @RequestParam(value = "smsCode", required = true) String smsCode) {
		Boolean result = basicDataService.querySmsCode(phone, smsCode);
		return new Response(result ? Statu.OK : Statu.FAIL, result ? "验证码校验通过" : "验证码错误或已过期",
				UUID.randomUUID().toString());
	}

	@Override
	public Response savePlanTime(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token,
			@ApiParam(required = true, name = "planTimeDto", value = "时间参数") @RequestBody(required = true) PlanTimeDto planTimeDto) {
		Boolean result = basicDataService.savePlanTime(token, planTimeDto);
		return new Response(result ? Statu.OK : Statu.FAIL, result ? "操作成功" : "操作失败", UUID.randomUUID().toString());
	}

	@Override
	public Response updateAuditStatu(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token,
			@ApiParam(required = true, name = "status", value = "true表开启审核权限，false表示关闭") @RequestParam(name = "status", required = true) Boolean status) {
		Response response = null;
		try {
			Boolean result = basicDataService.updateAuditStatu(token, status);
			response = new Response(result ? Statu.OK : Statu.FAIL, result ? "信息更新成功" : "信息更新失败", token);
		} catch (CustomeException e) {
			response = new Response(Statu.FAIL, e.getMessage(), token);
		}
		return response;
	}

	@Override
	public Response queryAuditStatu(
			@ApiParam(required = true, name = "token", value = "token信息") @RequestHeader(value = "token", required = true) String token) {
		Response response = null;
		try {
			Boolean result = basicDataService.queryAuditStatu(token);
			response = new Response(Statu.OK, result, token);
		} catch (CustomeException e) {
			response = new Response(Statu.FAIL, e.getMessage(), token);
		}
		return response;
	}

	@Override
	public Response queryPlanTime(HttpServletRequest request, HttpServletResponse response) {
		PlanTime planTime = basicDataService.queryPlanTime();
		return new Response(planTime == null ? Statu.FAIL : Statu.OK, planTime, null);
	}

}
