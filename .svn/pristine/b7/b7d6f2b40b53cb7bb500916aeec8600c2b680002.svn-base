package com.nercel.enroll.core.service.impl;

import org.springframework.beans.factory.annotation.Autowired;

import com.nercel.enroll.common.utils.JwtTokenProvider;
import com.nercel.enroll.dao.impl.UserDao;
import com.nercel.enroll.domain.common.CustomeException;
import com.nercel.enroll.domain.model.beans.User;

import io.jsonwebtoken.Claims;

/**
 * 基础逻辑处理类
 * 
 * @author yishui
 * @date 2018年6月14日
 * @version 0.0.1
 */
public abstract class BaseService {

	/**
	 * 默认的参数名字
	 */
	protected final static String DEFAULT_TOKEN_NAME = "recordId";
	@Autowired
	private UserDao userDao;

	public UserDao getUserDao() {
		return userDao;
	}

	public void setUserDao(UserDao userDao) {
		this.userDao = userDao;
	}

	/**
	 * 对传入的token信息进行检查，若token有问题则跑出异常
	 * 
	 * @param token
	 *            token信息
	 * @return
	 * @throws CustomeException
	 */
	protected Integer checkToken(String token) throws CustomeException {
		Claims claims = new JwtTokenProvider(JwtTokenProvider.DEFAULT_KEY).parseToken(token);
		if (claims == null) {
			throw new CustomeException("传入的token不正确或者已经过期");
		}
		if (claims.get(DEFAULT_TOKEN_NAME, Integer.class) == null) {
			throw new CustomeException("没有提取到有用的token信息");
		}
		return claims.get(DEFAULT_TOKEN_NAME, Integer.class);
	}

	/**
	 * 传入的token进行角色检查
	 * 
	 * @param token
	 *            token信息
	 * @param minRole
	 *            最小的角色的id，如操作者的角色小鱼此角色就会报错无权限
	 * @return 当前操作的操作者
	 * @throws CustomeException
	 */
	protected User checkToken(String token, Integer minRole) throws CustomeException {
		Integer userId = checkToken(token);
		User user = userDao.queryUserById(userId);
		if (user != null) {
			if (user.getRole() >= (minRole == null ? 0 : minRole)) {
				return user;
			}
			throw new CustomeException("您无权执行此操作");
		}
		throw new CustomeException("传入的token不正确，未查询到操作用户");
	}
}
