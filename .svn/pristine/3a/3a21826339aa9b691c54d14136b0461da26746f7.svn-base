package com.nercel.enroll.core.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nercel.enroll.common.entity.SmsException;
import com.nercel.enroll.common.utils.SmsUtil;
import com.nercel.enroll.core.service.DegreeeApplicationService;
import com.nercel.enroll.dao.impl.ApplyInfoDao;
import com.nercel.enroll.dao.impl.SchoolDao;
import com.nercel.enroll.dao.impl.UserDao;
import com.nercel.enroll.domain.common.CustomeException;
import com.nercel.enroll.domain.model.beans.ApplyInfo;
import com.nercel.enroll.domain.model.beans.School;
import com.nercel.enroll.domain.model.beans.User;
import com.nercel.enroll.domain.vo.ApplyVo;

@Service
public class DegreeeApplicationServiceImpl extends BaseService implements DegreeeApplicationService {

	private final static Logger LOG = LoggerFactory.getLogger(DegreeeApplicationService.class);
	/**
	 * 审核通过时的提醒信息
	 */
	private final static String APPROVAL_SUCCESS = "恭喜您，您的学位申请已经审批通过!";
	/**
	 * 驳回申请时的提示信息
	 */
	private final static String APPROVAL_FAIL = "您提交的材料信息不完整或不正确，请及时重新提交审核材料!";

	/**
	 * 成功的标志
	 */
	private final static Integer SUC_STATUS = 1;

	/**
	 * 审核通过时的状态
	 */
	private final static Integer APPLY_SUC_STATUS = 1;
	/**
	 * 学生的角色(1幼升小、2小升初、3学校、4教育局),故角色ID>2的才是管理员
	 */
	private final static Integer ROLE_LIMIT = 2;
	/**
	 * 教育局官员的角色
	 */
	private final static Integer ROLE_MANAGER = 4;
	/**
	 * 查询出未分配的学生
	 */
	private final static Integer UN_ASSIGNED_STUDENT = 4;

	/**
	 * 学位申请记录接口
	 */
	@Autowired
	private ApplyInfoDao applyInfoDao;
	/**
	 * 用户基本信息接口
	 */
	@Autowired
	private UserDao userDao;
	/**
	 * 
	 */
	@Autowired
	private SchoolDao schoolDao;

	@Override
	public ApplyVo queryDegreeApplyInfo(String token) throws CustomeException {

		List<ApplyInfo> applyInfos = applyInfoDao.queryApplyInfoByUserId(checkToken(token));
		if (applyInfos != null && applyInfos.size() > 0) {
			return queryApplyInfo(applyInfos.get(0));
		}

		return null;
	}

	@Override
	public List<ApplyVo> queryDegreeApplyInfomation(String token) throws CustomeException {
		User user = userDao.queryUserById(checkToken(token));
		if (user != null) {
			return convertApplyInfo(applyInfoDao.queryApplyInfoBySchoolId(user.getSchoolId()));
		}
		return null;
	}

	@Override
	public List<ApplyVo> queryDegreeApplyInfo(String token, Integer schoolId, String studentName, String IdCard,
			Integer applyStatu, Integer schoolType) throws CustomeException {
		Integer userId = checkToken(token);
		// 查询出操作者的信息
		User user = userDao.queryUserById(userId);
		if (user == null || user.getRole() != ROLE_MANAGER) {
			throw new CustomeException("对不起，你无权执行此操作！");
		}
		// 查询出所有的申请信息
		List<ApplyInfo> applyInfos = applyInfoDao.queryApplyInfoByUserAndSChoolCondtion(schoolId,
				StringUtils.isBlank(studentName) ? null : studentName, StringUtils.isBlank(IdCard) ? null : IdCard,
				applyStatu, schoolType);

		return convertApplyInfo(applyInfos);

	}

	@Override
	public Boolean updateApplyStatus(String token, Integer studentId, Integer applyId, Integer applyStatus,
			String approve_opinion) throws CustomeException {
		Integer userId = checkToken(token);
		// 查询出操作者的信息
		User user = userDao.queryUserById(userId);
		User student = userDao.queryUserById(studentId);
		ApplyInfo applyInfo = applyInfoDao.queryApplyInfoById(applyId);
		if (applyInfo != null) {
			if(applyInfo.getApplyStatus()==SUC_STATUS){
				throw new CustomeException("该学生已经审核通过，不能二次审核");
			}
			// 用户角色必须是管理员
			if (student != null && user != null && user.getRole() != null && user.getRole() > ROLE_LIMIT) {
				applyInfoDao.updateApplyInfoById(new ApplyInfo(applyId, applyStatus, userId, System.currentTimeMillis(),
						approve_opinion, applyStatus == APPLY_SUC_STATUS ? APPROVAL_SUCCESS : APPROVAL_FAIL));
				try {
					if (applyStatus == SUC_STATUS) {
						SmsUtil.sendSucMessage(student.getPhone());
					} else {
						SmsUtil.sendFailMessage(student.getPhone());
					}
				} catch (SmsException e) {
					LOG.error(e.getMessage());
				}
				return true;
			}
		}

		return false;
	}

	@Override
	public List<ApplyVo> queryUnassignedStudent(String token, Integer schoolType) throws CustomeException {
		// 查询出操作者的信息
		User user = userDao.queryUserById(checkToken(token));
		// 用户角色必须是管理员
		if (user != null && user.getRole() != null && user.getRole() > ROLE_LIMIT) {
			return convertApplyInfo(applyInfoDao.queryApplyInfoBySchoolTypeAndStatus(schoolType, APPLY_SUC_STATUS));

		}
		return null;
	}

	@Override
	public Boolean updateApplySchool(String token, Integer userId, Integer schoolId, Integer applyId)
			throws CustomeException {
		// 查询出操作者的信息
		User user = userDao.queryUserById(checkToken(token));
		// 用户角色必须是管理员
		if (user != null && user.getRole() != null && user.getRole() > ROLE_LIMIT) {
			School school = schoolDao.querySchoolById(schoolId);
			if (school != null) {
				applyInfoDao.updateApplyInfoById(
						new ApplyInfo(applyId, userId, schoolId, "分区划片", APPLY_SUC_STATUS, checkToken(token),
								System.currentTimeMillis(), APPROVAL_SUCCESS, school.getName(), APPROVAL_SUCCESS));
				return true;
			}
		}
		return false;
	}

	@Override
	public List<ApplyVo> queryUnassignedStudent(String token, Integer schoolType, String studentName, String IdCard)
			throws CustomeException {
		// 查询出操作者的信息
		User user = userDao.queryUserById(checkToken(token));
		// 用户角色必须是管理员
		if (user != null && user.getRole() != null && user.getRole() > ROLE_LIMIT) {

			return convertApplyInfo(applyInfoDao.queryApplyInfoByCondition(schoolType,
					StringUtils.isNotBlank(studentName) ? studentName : null,
					StringUtils.isNotBlank(IdCard) ? IdCard : null, DegreeeApplicationServiceImpl.UN_ASSIGNED_STUDENT));

		}
		return null;
	}

	/**
	 * 转换申请情路到申请记录全信息
	 * 
	 * @param applyInfos
	 * @return
	 */
	private List<ApplyVo> convertApplyInfo(List<ApplyInfo> applyInfos) {
		List<ApplyVo> list = new ArrayList<>();
		if (applyInfos != null) {
			for (ApplyInfo applyInfo : applyInfos) {
				list.add(queryApplyInfo(applyInfo));
			}
		}
		return list;
	}

	/**
	 * 根据申请记录获取全部的申请信息
	 * 
	 * @param applyInfo
	 *            申请记录
	 * @return
	 */
	private ApplyVo queryApplyInfo(ApplyInfo applyInfo) {
		ApplyVo applyVo = null;
		if (applyInfo != null) {
			User approver = null;
			applyVo = new ApplyVo();
			BeanUtils.copyProperties(applyInfo, applyVo);
			// 有返回信息时
			if (applyInfo.getApprover() != null) {
				// 当有人审核时
				// 查询出审批人信息
				approver = userDao.queryUserById(applyInfo.getApprover());
				applyVo.setApproverName(approver != null ? approver.getUsername() : null);
			}
			// ApplyVo = new ApplyVo(applyInfo, approver);
		}
		return applyVo;
	}

}
