package com.nercel.enroll.core.service;

import java.io.IOException;
import java.util.List;

import com.nercel.enroll.domain.common.CustomeException;
import com.nercel.enroll.domain.dto.PlanTimeDto;
import com.nercel.enroll.domain.model.beans.CertificatesType;
import com.nercel.enroll.domain.model.beans.Country;
import com.nercel.enroll.domain.model.beans.Nation;
import com.nercel.enroll.domain.model.beans.Relational;
import com.nercel.enroll.domain.model.beans.School;
import com.nercel.enroll.domain.model.beans.StreetSchool;
import com.nercel.enroll.domain.model.beans.StudentInfo;

/**
 * 基础数据获取接口
 * 
 * @author yishui
 * @date 2018年6月13日
 * @version 0.0.1
 */
public interface BasicDataService {
	/**
	 * 查询出所有的民族信息
	 * 
	 * @return
	 */
	public List<Nation> queryAllNation();

	/**
	 * 查询出所有的国家信息
	 * 
	 * @return
	 */
	public List<Country> queryAllCountry();

	/**
	 * 查询出所有的证件类型信息
	 * 
	 * @return
	 */
	public List<CertificatesType> queryAllCertificatesType();

	/**
	 * 查询出所有的与学生的关系
	 * 
	 * @return
	 */
	public List<Relational> queryAllRelational();

	/**
	 * 查询出所有的学校
	 * 
	 * @return
	 */
	public List<School> queryAllSchool();

	/**
	 * 查询出学校招收的街道
	 * 
	 * @return
	 */
	public List<StreetSchool> queryAllStreetSchool();

	/**
	 * 查询出2018年小学毕业生学籍信息
	 * 
	 * @return
	 */
	public List<StudentInfo> queryAllStudentInfo();

	/**
	 * 根据id查询出2018年小学毕业生学籍信息
	 * 
	 * @return
	 */
	public List<StudentInfo> queryStudentInfo(String studentNumber);

	/**
	 * 根据学校类型查询学校
	 * 
	 * @return
	 */
	public List<School> querySchoolByType(Integer schoolType);

	/**
	 * 发送短信验证码
	 * 
	 * @param phone
	 *            手机号码
	 * @return
	 * @throws IOException
	 * @throws CustomeException
	 * @throws com.nercel.enroll.common.entity.CustomeException
	 * @throws Exception
	 */
	Boolean sendSmsCode(String phone) throws IOException, CustomeException, Exception;

	/**
	 * 查询验证码与手机号是否匹配
	 * 
	 * @param phone
	 *            手机号码
	 * @param smsCode
	 *            验证码
	 * @return
	 */
	Boolean querySmsCode(String phone, String smsCode);

	/**
	 * 保存计划时间
	 * 
	 * @param token
	 * @param planTimeDto
	 * @return
	 */
	Boolean savePlanTime(String token, PlanTimeDto planTimeDto);

	/**
	 * 修改审核状态
	 * 
	 * @param token
	 * @param statu
	 *            true表示开启
	 * @return
	 * @throws CustomeException
	 */
	Boolean updateAuditStatu(String token, Boolean statu) throws CustomeException;

	/**
	 * 系统管理员查询审核开关的状态
	 * 
	 * @param token
	 * @return
	 * @throws CustomeException
	 */
	Boolean queryAuditStatu(String token) throws CustomeException;
}
